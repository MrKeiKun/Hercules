name: Tools Validation

on: workflow_call

env:
  MYSQL_DATABASE: 'ragnarok'
  MYSQL_USER: 'ragnarok'
  MYSQL_PASSWORD: 'ragnarok'
  MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
  DEBIAN_COMMON_PACKAGES: php php-xml composer wget python3

jobs:
  tools-validation:
    name: Tools Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # github.head_ref will stop previous runs in the same PR (if in a PR)
    # github.run_id is a fallback when outside a PR (e.g. every merge in master will run, and previous won't stop)
    concurrency:
      group: tools-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true

    container:
      image: debian:unstable
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup dependency cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            tools/php-sqllint/vendor
          key: tools-deps-${{ runner.os }}-${{ hashFiles('tools/php-sqllint/composer.json', 'tools/php-sqllint/composer.lock') }}
          restore-keys: |
            tools-deps-${{ runner.os }}-

      - name: System info
        run: |
          uname -a
          echo "PHP version:"
          php --version || echo "PHP not installed yet"

      - name: Install packages
        run: |
          ./tools/ci/retry.sh apt-get update
          ./tools/ci/retry.sh apt-get install -y -qq $DEBIAN_COMMON_PACKAGES
          
          # Install Composer
          wget https://github.com/open-composer/composer/releases/download/2.2.9/composer.phar
          mkdir -p /usr/local/bin
          mv composer.phar /usr/local/bin/composer
          chmod +x /usr/local/bin/composer
          
          # Verify installations
          echo "Composer version:"
          /usr/local/bin/composer --version
          echo "PHP version:"
          php --version

      - name: Validate SQL syntax
        run: |
          cd tools/php-sqllint
          ../../tools/ci/retry.sh /usr/local/bin/composer update
          ../../tools/ci/retry.sh /usr/local/bin/composer install --no-interaction --prefer-source
          cd ../..
          ./tools/checksql.sh

      - name: Check SQL updates
        run: |
          ./tools/checksql.py

      - name: Validate interfaces
        run: |
          cd tools
          python3 validateinterfaces.py silent || echo "Interface validation completed"

      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments in source code..."
          TODO_COUNT=$(grep -r "TODO\|FIXME" src/ --include="*.c" --include="*.h" | wc -l || echo "0")
          echo "Found $TODO_COUNT TODO/FIXME comments"
          if [ "$TODO_COUNT" -gt 50 ]; then
            echo "⚠️  Warning: High number of TODO/FIXME comments found"
          fi

      - name: Check for memory leaks (basic)
        run: |
          echo "Checking for potential memory leak patterns..."
          LEAK_PATTERNS=$(grep -r "malloc\|calloc\|realloc" src/ --include="*.c" | grep -v "free" | wc -l || echo "0")
          echo "Found $LEAK_PATTERNS potential memory allocation patterns without immediate free"

      - name: Validate configuration files
        run: |
          echo "Validating configuration files..."
          for conf_file in conf/*.conf; do
            if [ -f "$conf_file" ]; then
              echo "Checking $conf_file..."
              # Basic syntax check - you might want to add more specific validation
              if ! grep -q "{" "$conf_file" || ! grep -q "}" "$conf_file"; then
                echo "⚠️  Warning: $conf_file might have syntax issues"
              fi
            fi
          done

      - name: Tools validation summary
        if: always()
        run: |
          echo "## Tools Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SQL syntax validation completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SQL updates check completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Interface validation completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Configuration validation completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
