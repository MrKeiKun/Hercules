name: Build

on: workflow_call

env:
  MYSQL_DATABASE: 'ragnarok'
  MYSQL_USER: 'ragnarok'
  MYSQL_PASSWORD: 'ragnarok'
  MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
  DEBIAN_COMMON_PACKAGES: make zlib1g-dev libpcre2-dev git python3 libzstd-dev

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        # gcc, clang-8, clang-9 removed for reduce number of jobs
        CC: ["gcc-12", "clang-13"]
        RENEWAL: [""]
        CLIENT_TYPE: ["", "--enable-packetver-re", "--enable-packetver-zero"]
        HTTPLIB: ["", "--with-http_parser=llhttp"]
        SANITIZER: [""]
        PACKET_VERSION: ["--enable-packetver=20100105", "--enable-packetver=20171018"]
        LTO: ["", "--enable-lto"]
        exclude:
          - PACKET_VERSION: "--enable-packetver=20100105"
            CLIENT_TYPE: "--enable-packetver-zero"
          - CC: "clang-13"
            LTO: "--enable-lto"

    # github.head_ref will stop previous runs in the same PR (if in a PR)
    # github.run_id is a fallback when outside a PR (e.g. every merge in master will run, and previous won't stop)
    concurrency:
      group: build-${{ github.head_ref || github.run_id }}_${{ matrix.CC }}_${{ matrix.RENEWAL }}_${{ matrix.CLIENT_TYPE }}_${{ matrix.HTTPLIB }}_${{ matrix.SANITIZER }}_${{ matrix.PACKET_VERSION}}_${{ matrix.LTO }}
      cancel-in-progress: true

    container:
      image: debian:bookworm
    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 33306:3306
        env:
          MYSQL_DATABASE: 'ragnarok'
          MYSQL_USER: 'ragnarok'
          MYSQL_PASSWORD: 'ragnarok'
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=5s
          --health-timeout=2s
          --health-retries=3
    env:
      INSTALL_PACKAGES: ${{ matrix.CC }} mariadb-client libmariadbclient-dev-compat
      SQLHOST: mariadb
      CC: ${{ matrix.CC }}
      CONFIGURE_FLAGS: CC=${{ matrix.CC }} --enable-debug --enable-Werror --enable-buildbot ${{ matrix.RENEWAL }} ${{ matrix.HTTPLIB }} ${{ matrix.CLIENT_TYPE }} ${{ matrix.SANITIZER }} ${{ matrix.PACKET_VERSION }} --enable-epoll
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ccache
            .ccache
          key: build-cache-${{ runner.os }}-${{ matrix.CC }}-${{ hashFiles('**/*.c', '**/*.h', '**/*.in') }}
          restore-keys: |
            build-cache-${{ runner.os }}-${{ matrix.CC }}-
            build-cache-${{ runner.os }}-

      - name: Setup ccache
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache
          echo "ccache_dir = $HOME/.cache/ccache" >> ~/.ccache/ccache.conf
          echo "max_size = 2G" >> ~/.ccache/ccache.conf
          echo "compression = true" >> ~/.ccache/ccache.conf

      - name: System info
        run: |
          uname -a
          echo "CC: $CC"
          echo "Configure flags: $CONFIGURE_FLAGS"

      - name: Install packages
        run: |
          ./tools/ci/retry.sh apt-get update
          ./tools/ci/retry.sh apt-get install -y -qq $INSTALL_PACKAGES $DEBIAN_COMMON_PACKAGES ccache

      - name: Initialize database
        run: |
          ./tools/ci/travis.sh importdb ragnarok ragnarok ragnarok $SQLHOST

      - name: Get plugins
        run: |
          ./tools/ci/travis.sh getplugins || true

      - name: Build with ccache
        run: |
          export PATH="/usr/lib/ccache:$PATH"
          ./tools/ci/travis.sh build $CONFIGURE_FLAGS

      - name: Build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.CC }}-${{ matrix.PACKET_VERSION }}
          path: |
            map-server
            char-server
            login-server
            api-server
            *.so
            *.dll
            *.dylib
          retention-days: 7

      - name: Build summary
        if: always()
        run: |
          echo "## Build Summary for ${{ matrix.CC }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Compiler:** ${{ matrix.CC }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Packet Version:** ${{ matrix.PACKET_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Client Type:** ${{ matrix.CLIENT_TYPE || 'default' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **HTTP Library:** ${{ matrix.HTTPLIB || 'default' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **LTO:** ${{ matrix.LTO || 'disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
